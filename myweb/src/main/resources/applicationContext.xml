<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

        <context:annotation-config/>
        <mvc:annotation-driven></mvc:annotation-driven>
        <!--加载properties-->
        <bean id="envConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                <property name="locations">
                        <list>
                                <value>classpath:env_config.properties</value>
                        </list>
                </property>
        </bean>
        <!-- 组件扫描， 对包中的所有类进行扫描，以完成bean的创建和自动依赖注入功能-->
        <context:component-scan base-package="com.zml.web" >
        </context:component-scan>

        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
                <property name="driverClassName" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
                <property name="maxActive" value="2" />
                <property name="maxIdle" value="3" />
                <property name="maxWait" value="10000" />
                <property name="validationQuery" value="SELECT 1" />
                <property name="testWhileIdle" value="true" />
                <property name="timeBetweenEvictionRunsMillis" value="3600000" />
                <property name="minEvictableIdleTimeMillis" value="18000000" />
                <property name="testOnBorrow" value="true" />
                <!--
                <property name="maxActive" value="200" />
                <property name="maxIdle" value="30" />
                <property name="maxWait" value="10000" />
                <property name="validationQuery" value="SELECT 1" />
                <property name="testWhileIdle" value="true" />
                <property name="timeBetweenEvictionRunsMillis" value="3600000" />
                <property name="minEvictableIdleTimeMillis" value="18000000" />
                <property name="testOnBorrow" value="true" />
                -->
        </bean>

        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                <property name="mapperLocations" value="classpath*:mybatismapper/*.xml"/>
                <property name="dataSource" ref="dataSource"/>
        </bean>

        <!--扫描basePackage下所有的@Dao注解的接口-->
        <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
                <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
                <property name="basePackage" value="com.zml.web"/>
                <property name="annotationClass" value="com.zml.web.common.annotation.Dao"/>
        </bean>

        <!--事务配置-->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                <property name="dataSource" ref="dataSource"/>
                <property name="globalRollbackOnParticipationFailure" value="false"/>
        </bean>

        <!--事务模板-->
        <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
                <property name="transactionManager" ref="transactionManager"/>
        </bean>

        <!--新建事务，如果当前存在事务，把当前事务挂起-->
        <bean id="transactionMandatoryTemplate" class="org.springframework.transaction.support.TransactionTemplate">
                <property name="propagationBehavior" value="2"/>
                <property name="transactionManager" ref="transactionManager"/>
        </bean>

        <!-- redis连接配置，依次为主机ip，端口，是否使用池，(usePool=true时)redis的池配置 -->
        <bean id="jedisFactory"
              class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
                <property name="hostName" value="${redis.host}"/>
                <property name="port" value="${redis.port}"/>
                <property name="password" value="${redis.password}"/>
                <property name="usePool" value="true"/> <property name="poolConfig"
                    ref="jedisPoolConfig"/>
        </bean>

        <!-- redis模板配置 -->
        <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
                <property name="connectionFactory" ref="jedisFactory"/>
                <property name="defaultSerializer">
                        <bean
                                class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
                </property>
        </bean>

        <!-- redis连接池配置-->
        <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
                <!--最大空闲数-->
                <property name="maxIdle" value="${redis.maxIdle}" />
                <!--连接池的最大数据库连接数  -->
                <property name="maxTotal" value="${redis.maxTotal}" />
                <!--最大建立连接等待时间-->
                <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
                <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
                <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
                <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
                <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
                <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
                <property name="testOnBorrow" value="${redis.testOnBorrow}" />
                <!--在空闲时检查有效性, 默认false  -->
                <property name="testWhileIdle" value="${redis.testWhileIdle}" />
        </bean >


        <!--@Controller 请求映射注解扫描-->
        <mvc:annotation-driven>
                <mvc:message-converters>
                        <!-- 展示层数据信息转换json -->
                        <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
                        <bean id="mappingJacksonHttpMessageConverter"
                              class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                                <property name="supportedMediaTypes">
                                        <list>
                                                <value>text/html;charset=UTF-8</value>
                                                <value>text/plain;charset=UTF-8</value>
                                                <value>text/json;charset=UTF-8</value>
                                                <value>application/json;charset=UTF-8</value>
                                        </list>
                                </property>
                        </bean>
                        <!-- string -->
                        <bean id="stringHttpMessageConverter"
                              class="org.springframework.http.converter.StringHttpMessageConverter" />
                </mvc:message-converters>
        </mvc:annotation-driven>

        <!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->
        <mvc:resources location="/static/images/" mapping="/images/**" />
        <mvc:resources location="/static/js/" mapping="/js/**" />
        <mvc:resources location="/static/css/" mapping="/css/**" />

        <!-- velocity引擎 -->
        <bean id="velocityConfigurer"
              class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
                <property name="resourceLoaderPath">
                        <value>/WEB-INF/pages/</value><!-- 页面文件路径相对于webapp -->
                </property>
                <property name="configLocation" value="/WEB-INF/velocity.properties" />
                <property name="velocityProperties">
                        <props>
                                <prop key="input.encoding">UTF-8</prop>
                                <prop key="output.encoding">UTF-8</prop>
                                <prop key="contentType">text/html;charset=UTF-8</prop>
                        </props>
                </property>
        </bean>

        <!-- velocity视图解析器 -->
        <bean id="velocityViewResover"
              class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
                <property name="cache" value="false" />
                <property name="layoutUrl" value="/layout/default.vm" />
                <property name="prefix" value="" />
                <property name="suffix" value=".vm" />
                <property name="contentType" value="text/html;charset=UTF-8" />
                <property name="allowSessionOverride" value="false" />
                <property name="allowRequestOverride" value="false" />
                <property name="exposeSessionAttributes" value="true" />
                <property name="exposeRequestAttributes" value="true" />
                <property name="requestContextAttribute" value="rc" />
                <property name="toolboxConfigLocation" value="WEB-INF/toolbox.xml" />
        </bean>

        <!-- Configure the multipart resolver 上传文件解析器 -->
        <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
        <bean id="multipartResolver"
              class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
                <property name="defaultEncoding">
                        <value>UTF-8</value>
                </property>
                <property name="maxUploadSize">
                        <value>5242880</value><!-- 上传文件大小限制为5M，5*1024*1024 -->
                </property>
                <property name="maxInMemorySize">
                        <value>5242880</value>
                </property>
        </bean>

        <!-- 切面 支持注解 -->
        <aop:aspectj-autoproxy proxy-target-class="true" />
        <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
        <tx:annotation-driven transaction-manager="transactionManager"
                              proxy-target-class="true" />

        <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
</beans>